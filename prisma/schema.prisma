// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String    @unique
  emailVerified DateTime?
  firstName     String    @default("FIRSTNAME")
  lastName      String    @default("LASTNAME")
  phoneNumber   String?
  username      String?
  password      String?
  image         String?
  role          String    @default("user")
  account       Account[]
  session       Session[]

  sentMessages     Message[] @relation(name: "SentMessages")
  receivedMessages Message[] @relation(name: "ReceivedMessages")

  bookmarks Property[]

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Property {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ownerId     String  @db.Uuid
  owner       User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name        String
  type        String
  description String?
  price       Decimal @db.Decimal(12, 2)
  discount    Decimal @db.Decimal(12, 2)

  location   Location @relation(fields: [locationId], references: [id])
  locationId String   @unique @db.Uuid

  beds       Int
  baths      Int
  squareFeet Int

  amenities String[]
  rates     Rates    @relation(fields: [ratesId], references: [id])
  ratesId   String   @unique @db.Uuid

  sellerInfo   SellerInfo @relation(fields: [sellerInfoId], references: [id])
  sellerInfoId String     @unique @db.Uuid

  images     String[]
  videoUrl   String
  messages   Message[]
  isFeatured Boolean   @default(false)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model Location {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  street   String?
  city     String?
  state    String?
  zipcode  String?
  property Property?
}

model Rates {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nightly  Decimal?  @db.Decimal(12, 2)
  weekly   Decimal?  @db.Decimal(12, 2)
  monthly  Decimal?  @db.Decimal(12, 2)
  property Property?
}

model SellerInfo {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String?
  email    String?
  phone    String?
  property Property?
}

model Message {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  senderId    String @db.Uuid
  recipientId String @db.Uuid
  propertyId  String @db.Uuid

  sender    User     @relation(name: "SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient User     @relation(name: "ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  property  Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  name      String
  email     String
  phone     String?
  body      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}
